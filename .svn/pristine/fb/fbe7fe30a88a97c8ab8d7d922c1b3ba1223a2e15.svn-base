package gamestates;

import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;

import org.newdawn.slick.Animation;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.state.BasicGameState;
import org.newdawn.slick.state.StateBasedGame;
import org.newdawn.slick.tiled.TiledMap;

import systems.*;
import components.*;

import com.artemis.Entity;
import com.artemis.EntitySystem;
import com.artemis.SystemManager;
import com.artemis.World;


public class GameplayState extends BasicGameState
{
	private int stateID = 2;
	private static GameplayState gp;
	private TiledMap tm;
	private World world;

	private SystemManager systemManager;
	private	EntitySystem collisionSystem;
	private EntitySystem cooldownSystem;
	private EntitySystem hudRenderSystem;
	private EntitySystem inputSystem;
	private EntitySystem mapRenderSystem;
	private EntitySystem physicsSystem;
	private EntitySystem renderingSystem;
	private EntitySystem animationRenderSystem;
	private EntitySystem HUDRenderSystem;

	private Image[] wizWalk;
	private Image[] wizCast;

	private Image[] disintegrate;
	private Image[] lightning;
	private Image[] lightningBlade;
	private Image[] coneOfFire;
	private Image[] deathOrb;
	private Image[] agility;
	private Image[] ghost;
	private Image[] replenish;
	private Image[] temper;

	private Animation a;

	public GameplayState(int stateID)
	{
		this.stateID = stateID;
	}

	public static GameplayState getInstance()
	{
		if(gp == null)
		{
			gp = new GameplayState(2);
		}
		return gp;
	}

	public void init(GameContainer gc, StateBasedGame sbg) throws SlickException 
	{ 
		tm = new TiledMap("Data" + File.separator + "Maps" + File.separator + "start map.tmx");
		world = new World();

		//wizard image arrays
		wizWalk = new Image[3];
		wizWalk[0] = new Image("Data" + File.separator + "Character Sprites" + File.separator + "Walking 1.png");
		wizWalk[1] = new Image("Data" + File.separator + "Character Sprites" + File.separator + "Walking 1.5.png");
		wizWalk[2] = new Image("Data" + File.separator + "Character Sprites" + File.separator + "Walking 2.png");

		wizCast = new Image[2];
		wizCast[0] = new Image("Data" + File.separator + "Character Sprites" + File.separator + "Casting Spell.png");
		wizCast[1] = new Image("Data" + File.separator + "Character Sprites" + File.separator + "Casting Spell 2.png");
		
		//spell arrays
		disintegrate = new Image[4];
		disintegrate[0] = new Image("Data" + File.separator + "Spell Sprites" + File.separator + "Disintegrate 1.png");
		disintegrate[1] = new Image("Data" + File.separator + "Spell Sprites" + File.separator + "Disintegrate 2.png");
		disintegrate[2] = new Image("Data" + File.separator + "Spell Sprites" + File.separator + "Disintegrate 3.png");
		disintegrate[3] = new Image("Data" + File.separator + "Spell Sprites" + File.separator + "Disintegrate 4.png");
				
		lightning = new Image[3];
		lightning[0] = new Image("Data" + File.separator + "Spell Sprites" + File.separator + "Lightning Bolt.png");
		lightning[1] = new Image("Data" + File.separator + "Spell Sprites" + File.separator + "Lightning Bolt 1.png");
		lightning[2] = new Image("Data" + File.separator + "Spell Sprites" + File.separator + "Lightning Bolt 2.png");
		
		lightningBlade = new Image[2];
		lightningBlade[0] = new Image("Data" + File.separator + "Spell Sprites" + File.separator + "Lightning Blade 1.png");
		lightningBlade[1] = new Image("Data" + File.separator + "Spell Sprites" + File.separator + "Lightning Blade 2.png");
		
		coneOfFire = new Image[8];
		coneOfFire[0] = new Image("Data" + File.separator + "Spell Sprites" + File.separator + "Cone of Fire 1 (1).png");
		coneOfFire[1] = new Image("Data" + File.separator + "Spell Sprites" + File.separator + "Cone of Fire 1 (2).png");
		coneOfFire[2] = new Image("Data" + File.separator + "Spell Sprites" + File.separator + "Cone of Fire 1 (3).png");
		coneOfFire[3] = new Image("Data" + File.separator + "Spell Sprites" + File.separator + "Cone of Fire 1 (4).png");
		coneOfFire[4] = new Image("Data" + File.separator + "Spell Sprites" + File.separator + "Cone of Fire 1 (5).png");
		coneOfFire[5] = new Image("Data" + File.separator + "Spell Sprites" + File.separator + "Cone of Fire 1 (6).png");
		coneOfFire[6] = new Image("Data" + File.separator + "Spell Sprites" + File.separator + "Cone of Fire 1 (7).png");
		coneOfFire[7] = new Image("Data" + File.separator + "Spell Sprites" + File.separator + "Cone of Fire 1 (8).png");
		
		deathOrb = new Image[3];
		deathOrb[0] = new Image("Data" + File.separator + "Spell Sprites" + File.separator + "Death Orb 1.png");
		deathOrb[1] = new Image("Data" + File.separator + "Spell Sprites" + File.separator + "Death Orb 2.png");
		deathOrb[2] = new Image("Data" + File.separator + "Spell Sprites" + File.separator + "Death Orb 3.png");
		
		agility = new Image[1];
		agility[0] = new Image("Data" + File.separator + "Spell Sprites" + File.separator + "Agility.png");
		
		ghost = new Image[1];
		ghost[0] = new Image("Data" + File.separator + "Spell Sprites" + File.separator + "Ghost.png");
		
		replenish = new Image[1];
		replenish[0] = new Image("Data" + File.separator + "Spell Sprites" + File.separator + "Replenish.png");
		
		temper = new Image[1];
		temper[0] = new Image("Data" + File.separator + "Spell Sprites" + File.separator + "Temper.png");
		
		systemManager = world.getSystemManager();
		animationRenderSystem = systemManager.setSystem(new AnimationRenderSystem());
		inputSystem = systemManager.setSystem(new InputSystem(gc));
		physicsSystem = systemManager.setSystem(new PhysicsSystem());
		renderingSystem = systemManager.setSystem(new RenderingSystem());
		mapRenderSystem = systemManager.setSystem(new MapRenderSystem());
		HUDRenderSystem = systemManager.setSystem(new HUDRenderSystem(gc));
		systemManager.initializeAll();

		Entity player = world.createEntity();
		Entity map = world.createEntity();

		player.addComponent(new Stats(100,100,5,5,3,3,3));
		player.addComponent(new Velocity(0,0,false));
		player.addComponent(new Position(594,309));
		player.addComponent(new Player());
		player.addComponent(new SpriteSheet(wizWalk));
		player.addComponent(new Collides(null));
		player.addComponent(new Sprite("Data" + File.separator + "Character Sprites" + File.separator + "wizard.png"));
		player.refresh();

		map.addComponent(new Collides(null));
		map.refresh();

		a = new Animation (coneOfFire, 50, true);
	}

	public TiledMap getMap()
	{
		return tm;
	}



	@Override
	public void render(GameContainer gc, StateBasedGame sbg, Graphics g) throws SlickException
	{	// TODO Auto-generated method stub
		mapRenderSystem.process();
		renderingSystem.process();
		animationRenderSystem.process();
		HUDRenderSystem.process();

		a.draw(400, 400);
	}


	@Override
	public void update(GameContainer gc, StateBasedGame sbg, int delta)	throws SlickException 
	{
		world.loopStart();
		inputSystem.process();
		physicsSystem.process();
		world.setDelta(delta);


	}

	@Override
	public int getID() {
		// TODO Auto-generated method stub
		return stateID;
	}
}
