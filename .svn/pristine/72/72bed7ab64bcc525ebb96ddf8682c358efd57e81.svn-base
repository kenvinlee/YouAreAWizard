package systems;

import org.newdawn.slick.geom.Shape;

import com.artemis.EntityProcessingSystem;
import com.artemis.ComponentMapper;
import com.artemis.Entity;

import components.Position;
import components.Velocity;
import components.Collides;

public class PhysicsSystem extends EntityProcessingSystem{
	
	private ComponentMapper<Position> pos;
	private ComponentMapper<Velocity> vel;
	private ComponentMapper<Collides> col;
	
	public PhysicsSystem()
	{
		super(Position.class, Velocity.class, Collides.class);
	}
	
	public void initialize()
	{
		pos = new ComponentMapper<Position>(Position.class, world);
		vel = new ComponentMapper<Velocity>(Velocity.class, world);
		col = new ComponentMapper<Collides>(Collides.class, world);
	}
	
	public void process(Entity e)
	{
		pos.get(e).addX(vel.get(e).getXComponent()*world.getDelta());
		pos.get(e).addY(vel.get(e).getYComponent()*world.getDelta());
		Entity map = world.getGroupManager().getEntities("MAP").get(0);
		
		/*//Make sure the unit is not running into a wall
		if(!vel.get(e).getGhost())
		{
			//This method of getting a component is slower, but does not require a mapper for a single entity
			Collides c = col.get(map);
			for(Shape s: c.getShapes())
			{
				for(Shape p : col.get(e).getShapes())
				{
					if(s.intersects(p))
					{
						//If they intesect, move the unnit back
						//This is placeholder code, i'm too lazy to do it properly right now
						
						pos.get(e).addX(-vel.get(e).getXComponent()*world.getDelta());
						pos.get(e).addX(-vel.get(e).getYComponent()*world.getDelta());
						break;
					}
				}
			}
		}*/
	}

}
